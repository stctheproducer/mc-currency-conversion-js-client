/**
 * Standard Currency Conversion Calculator
 * This API provides a range of functions to get back currency conversion rates and amounts based on current Mastercard currency conversion values.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Conversion model module.
 * @module model/Conversion
 * @version 1.0.0
 */
class Conversion {
    /**
     * Constructs a new <code>Conversion</code>.
     * @alias module:model/Conversion
     */
    constructor() { 
        
        Conversion.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Conversion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Conversion} obj Optional instance to populate.
     * @return {module:model/Conversion} The populated <code>Conversion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Conversion();

            if (data.hasOwnProperty('conversionRate')) {
                obj['conversionRate'] = ApiClient.convertToType(data['conversionRate'], 'Number');
            }
            if (data.hasOwnProperty('crdhldBillAmt')) {
                obj['crdhldBillAmt'] = ApiClient.convertToType(data['crdhldBillAmt'], 'Number');
            }
            if (data.hasOwnProperty('transAmt')) {
                obj['transAmt'] = ApiClient.convertToType(data['transAmt'], 'Number');
            }
            if (data.hasOwnProperty('fxDate')) {
                obj['fxDate'] = ApiClient.convertToType(data['fxDate'], 'String');
            }
            if (data.hasOwnProperty('transCurr')) {
                obj['transCurr'] = ApiClient.convertToType(data['transCurr'], 'String');
            }
            if (data.hasOwnProperty('crdhldBillCurr')) {
                obj['crdhldBillCurr'] = ApiClient.convertToType(data['crdhldBillCurr'], 'String');
            }
            if (data.hasOwnProperty('bankFee')) {
                obj['bankFee'] = ApiClient.convertToType(data['bankFee'], 'Number');
            }
            if (data.hasOwnProperty('errorCode')) {
                obj['errorCode'] = ApiClient.convertToType(data['errorCode'], 'String');
            }
            if (data.hasOwnProperty('errorMessage')) {
                obj['errorMessage'] = ApiClient.convertToType(data['errorMessage'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Rate applied to the transaction to convert from Transaction Currency to Cardholder Billing Currency.
 * @member {Number} conversionRate
 */
Conversion.prototype['conversionRate'] = undefined;

/**
 * Amount in the cardholder billing currency.
 * @member {Number} crdhldBillAmt
 */
Conversion.prototype['crdhldBillAmt'] = undefined;

/**
 * Amount in the transaction currency.
 * @member {Number} transAmt
 */
Conversion.prototype['transAmt'] = undefined;

/**
 * Date of the requested FX rates.
 * @member {String} fxDate
 */
Conversion.prototype['fxDate'] = undefined;

/**
 * Currency of the transaction.
 * @member {String} transCurr
 */
Conversion.prototype['transCurr'] = undefined;

/**
 * Cardholder billing currency.
 * @member {String} crdhldBillCurr
 */
Conversion.prototype['crdhldBillCurr'] = undefined;

/**
 * Additional fees imposed by the bank.
 * @member {Number} bankFee
 */
Conversion.prototype['bankFee'] = undefined;

/**
 * The error code associated with the error being returned.
 * @member {String} errorCode
 */
Conversion.prototype['errorCode'] = undefined;

/**
 * The reason for the error.
 * @member {String} errorMessage
 */
Conversion.prototype['errorMessage'] = undefined;






export default Conversion;

