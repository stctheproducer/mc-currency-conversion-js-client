/**
 * Standard Currency Conversion Calculator
 * This API provides a range of functions to get back currency conversion rates and amounts based on current Mastercard currency conversion values.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Conversion from './model/Conversion';
import ConversionRateRequest from './model/ConversionRateRequest';
import Currency from './model/Currency';
import SettlementCurrency from './model/SettlementCurrency';
import SettlementCurrencyRequest from './model/SettlementCurrencyRequest';
import SettlementRateIssued from './model/SettlementRateIssued';
import SettlementRateIssuedRequest from './model/SettlementRateIssuedRequest';
import ConversionRateApi from './api/ConversionRateApi';
import CurrenciesApi from './api/CurrenciesApi';
import RateIssuedApi from './api/RateIssuedApi';


/**
* This_API_provides_a_range_of_functions_to_get_back_currency_conversion_rates_and_amounts_based_on_current_Mastercard_currency_conversion_values_.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var StandardCurrencyConversionCalculator = require('index'); // See note below*.
* var xxxSvc = new StandardCurrencyConversionCalculator.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new StandardCurrencyConversionCalculator.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new StandardCurrencyConversionCalculator.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new StandardCurrencyConversionCalculator.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Conversion model constructor.
     * @property {module:model/Conversion}
     */
    Conversion,

    /**
     * The ConversionRateRequest model constructor.
     * @property {module:model/ConversionRateRequest}
     */
    ConversionRateRequest,

    /**
     * The Currency model constructor.
     * @property {module:model/Currency}
     */
    Currency,

    /**
     * The SettlementCurrency model constructor.
     * @property {module:model/SettlementCurrency}
     */
    SettlementCurrency,

    /**
     * The SettlementCurrencyRequest model constructor.
     * @property {module:model/SettlementCurrencyRequest}
     */
    SettlementCurrencyRequest,

    /**
     * The SettlementRateIssued model constructor.
     * @property {module:model/SettlementRateIssued}
     */
    SettlementRateIssued,

    /**
     * The SettlementRateIssuedRequest model constructor.
     * @property {module:model/SettlementRateIssuedRequest}
     */
    SettlementRateIssuedRequest,

    /**
    * The ConversionRateApi service constructor.
    * @property {module:api/ConversionRateApi}
    */
    ConversionRateApi,

    /**
    * The CurrenciesApi service constructor.
    * @property {module:api/CurrenciesApi}
    */
    CurrenciesApi,

    /**
    * The RateIssuedApi service constructor.
    * @property {module:api/RateIssuedApi}
    */
    RateIssuedApi
};
